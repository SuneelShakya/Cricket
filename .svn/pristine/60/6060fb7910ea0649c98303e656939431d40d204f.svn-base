using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.IO;
using Microsoft.AspNetCore.Hosting;
using System.Threading;
using Newtonsoft.Json.Linq;
using System.Text;
using Microsoft.AspNetCore.Http;


namespace Mam_Configuration_Demo.Controllers
{
    [Route("api/[controller]")]
    public class SampleDataController : Controller
    {
        private static string[] Summaries = new[]
        {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };

        [HttpGet("[action]")]
        public IEnumerable<WeatherForecast> WeatherForecasts()
        {
            var rng = new Random();
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                DateFormatted = DateTime.Now.AddDays(index).ToString("d"),
                TemperatureC = rng.Next(-20, 55),
                Summary = Summaries[rng.Next(Summaries.Length)]
            });
        }

        public class WeatherForecast
        {
            public string DateFormatted { get; set; }
            public int TemperatureC { get; set; }
            public string Summary { get; set; }

            public int TemperatureF
            {
                get
                {
                    return 32 + (int)(TemperatureC / 0.5556);
                }
            }
        }

        [HttpPost("[action]")]

        public JsonResult submitDBdata([FromBody] dynamic data)
        {
            
            dynamic jsonObject = new JObject(data);
            setConnectionstring(data);

        var json = (string)JsonConvert.SerializeObject(jsonObject);
            var url = $"CheckIfDbExist";
            

            
            return Json(url.MakeRequestNamanApi(json));
            
            // return Json(ServiceRequest.MakeRequest("1011", data, DB.CheckIfDbExist));
            // var customerid = objUser.RoleID == "2" ? objUser.UID : objUser.CreatedBy;
            // jsonObject.user = customerid.ToString();
            // jsonObject.SSHIP = Program.SSHIP;
            // jsonObject.SSHPort = Program.SSHPort;
            // jsonObject.SSHUsername = Program.SSHUsername;
            // jsonObject.SSHPassword = Program.SSHPassword;            
            

            // return Json(Program.runcommand(Command));

            //  var json = (string)JsonConvert.SerializeObject(data);
            // var url = $"getrealtimedata/";
            // return Json(ServiceRequest.MakeRequest(url));
        }


        public static void setConnectionstring(dynamic ConnectionString)
        {
        try
        {
            dynamic jsonObject = new JObject(ConnectionString);

            string json = System.IO.File.ReadAllText("appsettings.json");
            dynamic jsonObj = Newtonsoft.Json.JsonConvert.DeserializeObject(json);
            jsonObj["Data"]["DBHostIP"] = jsonObject.IP;
            jsonObj["Data"]["DBName"] = jsonObject.DBName;
            jsonObj["Data"]["DBPort"] = jsonObject.Port;
            jsonObj["Data"]["MAMDBuser"] = jsonObject.MAMDBuser;
            jsonObj["Data"]["MAMDBPassword"] = jsonObject.MAMDBPassword;

            string output = Newtonsoft.Json.JsonConvert.SerializeObject(jsonObj, Newtonsoft.Json.Formatting.Indented);
            System.IO.File.WriteAllText("appsettings.json", output);
        }
        catch
        {

        }

    }


[HttpPost("[action]")]

        public JsonResult CreateDB([FromBody] dynamic data)
        {
            
            dynamic jsonObject = new JObject(data);
            setConnectionstring(data);

        var json = (string)JsonConvert.SerializeObject(jsonObject);
            var url = $"CreateDb";
            

            
            return Json(url.MakeRequestNamanApi(json));
            
            
        }


        
        [HttpGet("[action]")]
        public JsonResult checkpackage()
        {
            string Command="";
           string url="CheckComponents";
            return Json(ServiceRequest.MakeRequest("1011", Command,url, DB.GetData));


           
        }

        [HttpGet("[action]")]
        public JsonResult fetchinspectordata()
        {
            string Command="select UID,Name,BinaryName,SystemIP,PortRx,PortTx,status,Version from inspectormaster";
        //    string url="select * from inspectormaster";
            return Json(ServiceRequest.MakeRequestLocal("1011", Command, DB.GetDataAsync));

           
        }

         [HttpGet("[action]")]
        public JsonResult fetchComponentdata()
        {
            string Command="select * from componentmaster";
        //    string url="select * from inspectormaster";
            return Json(ServiceRequest.MakeRequestLocal("1011", Command, DB.GetDataAsync));
           
        }

        [HttpGet("[action]")]
        public JsonResult fetchflowdata()
        {
            string Command="select f.*,i.Name as inspectorname from flowtableexample f left join inspectormaster i on f.Inspector= i.UID group by Name";
        //    string url="select * from inspectormaster";
            return Json(ServiceRequest.MakeRequestLocal("1011", Command, DB.GetDataAsync));
           
        }

        [HttpGet("[action]")]
        public JsonResult fetchinspectorname()
        {
            string Command="select UID,Name from inspectormaster";
        //    string url="select * from inspectormaster";
            return Json(ServiceRequest.MakeRequestLocal("1011", Command, DB.GetDataAsync));
           
        }
        
        [HttpGet("[action]")]
        public JsonResult fetchComponents(string binary)
        {
            string Command="select * from components where binaryname='"+binary+"'";
        //    string url="select * from inspectormaster";
            return Json(ServiceRequest.MakeRequestLocal("1011", Command, DB.GetDataAsync));
           
        }

        [HttpGet("[action]")]
        public JsonResult fetchflowcomp(string id)
        {
            string Command="select Component,SeqNo,c.name,f.UID from flowtableexample f left join componentmaster c on f.Component=c.UID where f.Name='"+id+"'";
        //    string url="select * from inspectormaster";
            return Json(ServiceRequest.MakeRequestLocal("1011", Command, DB.GetDataAsync));
           
        }


        [HttpGet("[action]")]
        public JsonResult fetchcomponentname()
        {
            string Command="select UID,BinaryName,Name from componentmaster";
        //    string url="select * from inspectormaster";
            return Json(ServiceRequest.MakeRequestLocal("1011", Command, DB.GetDataAsync));
           
        }


        [HttpGet("[action]")]
        public JsonResult fetchUID(string id)
        {
            string Command="select UID from flowtableexample where Name = '"+id+"'";
        //    string url="select * from inspectormaster";
            return Json(ServiceRequest.MakeRequestLocal("1011", Command, DB.GetDataAsync));
           
        }

        [HttpGet("[action]")]
        public JsonResult deleteinspectordata(string id)
        {
            string Command="delete from inspectormaster where UID='"+id+"'";
        //    string url="select * from inspectormaster";
            return Json(ServiceRequest.MakeRequestLocal("1011", Command, DB.GetDataAsync));
           
        }

        [HttpGet("[action]")]
        public JsonResult deleteflowdata(string id)
        {
            string Command="delete from flowtableexample where Name='"+id+"'";
        //    string url="select * from inspectormaster";
            return Json(ServiceRequest.MakeRequestLocal("1011", Command, DB.GetDataAsync));
           
        }

        [HttpGet("[action]")]
        public JsonResult deletecomponent(string id)
        {
            string Command="delete from components where UID='"+id+"'";
        //    string url="select * from inspectormaster";
            return Json(ServiceRequest.MakeRequestLocal("1011", Command, DB.GetDataAsync));
           
        }

        [HttpGet("[action]")]
        public JsonResult deleteflowrow(string id)
        {
            string Command="delete from flowtableexample where UID='"+id+"'";
        //    string url="select * from inspectormaster";
            return Json(ServiceRequest.MakeRequestLocal("1011", Command, DB.GetDataAsync));
           
        }

        
        [HttpGet("[action]")]
        public JsonResult deletecomponentdata(string id)
        {
            string Command="delete from componentmaster where binaryname='"+id+"'";
        //    string url="select * from inspectormaster";
            return Json(ServiceRequest.MakeRequestLocal("1011", Command, DB.GetDataAsync));
           
        }

        [HttpGet("[action]")]
        public JsonResult updateinspectordata(string inspecdata)
        {
            string[] data;
            string Command=""; 
            data=inspecdata.Split('$');
            if(data[0]=="refresh"){
            Command="update inspectormaster set status='"+data[1]+"'";

            }
            else{
                if(data[7]=="nouid"){
                Command="insert into inspectormaster (Name,BinaryName,SystemIP,PortRx,PortTx,status,Version,LastScan) values('"+data[0]+"','"+data[1]+"','"+data[2]+"','"+data[3]+"','"+data[4]+"','"+data[5]+"','"+data[6]+"','"+DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")+"')";

                }
                else{
            Command="update inspectormaster set Name='"+data[0]+"',BinaryName='"+data[1]+"',SystemIP='"+data[2]+"',PortRx='"+data[3]+"',PortTx='"+data[4]+"',status='"+data[5]+"',version='"+data[6]+"' where UID='"+data[7]+"'";
        //    string url="select * from inspectormaster";
                }
            }
            return Json(ServiceRequest.MakeRequestLocal("1011", Command, DB.ExecuteScalar));





           
        }

        [HttpPost("[action]")]
        
        public JsonResult updatecomponentdata([FromBody] dynamic data)
        
        {
            string binaryname="";
            StringBuilder sb = new StringBuilder("");
            var json = (string)JsonConvert.SerializeObject(data);
            //dynamic x = JsonConvert.DeserializeObject(json);
            dynamic components = JsonConvert.DeserializeObject<List<dynamic>>(json);
            //x.Count()
    
                foreach(var data1 in components)
                {
                    
                    binaryname= data1.BinaryName;
                sb.Append("Update componentmaster set Name =");
                sb.Append("'" + data1.ComponentName + "'");
                sb.Append(",BinaryName=");
                sb.Append("'" + data1.BinaryName + "'");
                sb.Append(",path=");
                sb.Append("'" + data1.Path + "'");
                sb.Append(",Type=");
                sb.Append("'" + data1.Type + "'");
                sb.Append(",version=");
                sb.Append("'" + data1.Version + "'");
                sb.Append(",status=");
                sb.Append("'" + data1.Status + "'");
                sb.Append(",Reference=");
                sb.Append("'" + data1.Reference + "' where UID =");
                sb.Append("'" + data1.UID + "'");

                }
            
            {
                var response = ServiceRequest.MakeRequestLocal("1011", sb.ToString(), DB.GetDataAsync);
                return Json(binaryname);
              


           
        }
        
    }


    [HttpPost("[action]")]
        
        public JsonResult updateflowcomp([FromBody] dynamic data)
        
        {
            string binaryname="";
            StringBuilder sb = new StringBuilder("");
            var json = (string)JsonConvert.SerializeObject(data);
            //dynamic x = JsonConvert.DeserializeObject(json);
            dynamic components = JsonConvert.DeserializeObject<List<dynamic>>(json);
            //x.Count()
    
                foreach(var data1 in components)
                {
                    binaryname= data1.Name;
                sb.Append("Update flowtableexample set Name =");
                sb.Append("'" + data1.Name + "'");
                sb.Append(",Inspector=");
                sb.Append("'" + data1.Inspector + "'");
                sb.Append(",Component=");
                sb.Append("'" + data1.Component + "'");
                sb.Append(",SeqNo=");
                sb.Append("'" + data1.SeqNo + "'");
                sb.Append(",System=");
                sb.Append("'" + data1.System + "'");
                sb.Append(",Version=");
                sb.Append("'" + data1.Version + "'");
                sb.Append(",Status=");
                sb.Append("'" + data1.Status + "' where UID =");
                sb.Append("'" + data1.UID + "'");
                var response = ServiceRequest.MakeRequestLocal("1011", sb.ToString(), DB.GetDataAsync);
                sb = new StringBuilder("");


                }
            
            {
                return Json(binaryname);
              


           
        }
        
    }


        [HttpGet("[action]")]
        public JsonResult updateflowdata(string inspecdata)
        {
            string[] data;
            string Command=""; 
            data=inspecdata.Split('$');
    
            if(data[5]=="nouid"){
            Command="insert into flowmaster (Name,Inspector,System,version,status) values('"+data[0]+"','"+data[1]+"','"+data[2]+"','"+data[3]+"','"+data[4]+"')";
            }
            else{
            Command="update flowmaster set Name='"+data[0]+"',Inspector='"+data[1]+"',System='"+data[2]+"',version='"+data[3]+"',status='"+data[4]+"' where UID='"+data[5]+"'";
        //    string url="select * from inspectormaster";
            }
            return Json(ServiceRequest.MakeRequestLocal("1011", Command, DB.ExecuteScalar));


           
        }



        [HttpGet("[action]")]
        public JsonResult checkinspectorstatus(string inspecdata)
        
        {
            string Command="";
            string[] data; 
            data=inspecdata.Split('$');
           string url="Checkinspectorstatus/"+data[0]+"/"+data[1];
            return Json(ServiceRequest.MakeRequest("1011", Command,url, DB.GetData));

        }

        [HttpGet("[action]")]

        public JsonResult Insertinspectordata(string inspecdata)
        
        {
            string Command="";
            string[] data; 
            data=inspecdata.Split('$');
            Command="insert into inspectormaster (Name,BinaryName,SystemIP,PortRx,PortTx,status,Version,LastScan,Comments,Tags) values('"+data[0]+"','"+data[1]+"','"+data[2]+"','"+data[3]+"','"+data[4]+"','"+data[5]+"','"+data[6]+"','"+DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")+"','"+data[7]+"','"+data[8]+"')";
           string url="GetDataAsync/";
            return Json(ServiceRequest.MakeRequestinsert("1011",DB.ExecuteQuery,Command));

        }


[HttpGet("[action]")]

        public JsonResult Insertflowdata(string inspecdata)
        
        {
            string Command="";
            string[] data; 
            data=inspecdata.Split('$');
            Command="insert into flowtableexample (Name,Inspector,Component,SeqNo,System,Version,Status) values('"+data[0]+"','"+data[1]+"','"+data[2]+"','"+data[3]+"','"+data[4]+"','"+data[5]+"','"+data[6]+"')";
           string url="GetDataAsync/";
            return Json(ServiceRequest.MakeRequestLocal("1011",Command,DB.ExecuteScalar));


           
        }

        

        [HttpPost("[action]")]

        public JsonResult Insertflowcomp([FromBody] dynamic data)
        
        {
            var response = "";
            StringBuilder sb = new StringBuilder("");
            var json = (string)JsonConvert.SerializeObject(data);
            //dynamic x = JsonConvert.DeserializeObject(json);
            dynamic components = JsonConvert.DeserializeObject<List<dynamic>>(json);
            //x.Count()
    
                foreach(var data1 in components)
                {
                sb.Append("insert into flowtableexample (Name,Inspector,Component,SeqNo,System,Version,Status) values (");
                sb.Append("'" + data1.Name + "'");
                sb.Append(",'" + data1.Inspector + "'");
                sb.Append(",'" + data1.Component + "'");
                sb.Append(",'" + data1.SeqNo + "'");
                sb.Append(",'" + data1.System + "'");
                sb.Append(",'" + data1.Version + "'");
                sb.Append(",'" + data1.Status + "')");
                response = ServiceRequest.MakeRequestLocal("1011",sb.ToString(),DB.ExecuteQuery).Result;
                sb = new StringBuilder("");
            
                }

            return Json(response);
                
        }

        [HttpPost("[action]")]

        public JsonResult InsertComponentdata([FromBody] dynamic data)
        
        {
            StringBuilder sb = new StringBuilder("");
            var json = (string)JsonConvert.SerializeObject(data);
            //dynamic x = JsonConvert.DeserializeObject(json);
            dynamic components = JsonConvert.DeserializeObject<List<dynamic>>(json);
            //x.Count()
    
                foreach(var data1 in components)
                {
                sb.Append("insert into componentmaster (Name,BinaryName,path,Type,version,status,Reference) values (");
                sb.Append("'" + data1.ComponentName + "'");
                sb.Append(",'" + data1.BinaryName + "'");
                sb.Append(",'" + data1.Path + "'");
                sb.Append(",'" + data1.Type + "'");
                sb.Append(",'" + data1.Version + "'");
                sb.Append(",'" + data1.Status + "'");
                sb.Append(",'" + data1.Reference + "')");
                
                }
            
            {
                
             
           string url="GetDataAsync/";

              return Json(ServiceRequest.MakeRequestLocal("1011", sb.ToString(), DB.GetDataAsync));

           
        }
        
    }


        [HttpPost("[action]")]
        public JsonResult Insertcomponents([FromBody] dynamic data)
                {
                    

                    StringBuilder sb = new StringBuilder("");
                    var json = (string)JsonConvert.SerializeObject(data);
                    //dynamic x = JsonConvert.DeserializeObject(json);
                    dynamic components = JsonConvert.DeserializeObject<List<dynamic>>(json);
                    //x.Count()
            
                        foreach(var data1 in components)
                        {
                        sb.Append("insert into components (BinaryName,NameParameter,ArgumentValue,Detail) values (");
                        sb.Append("'" + data1.BinaryName + "'");
                        sb.Append(",'" + data1.ArgumentValue + "'");
                        sb.Append(",'" + data1.NameParameter + "'");
                        sb.Append(",'" + data1.Detail + "')");
                

                       var Response = ServiceRequest.MakeRequestLocal("1011", sb.ToString(), DB.GetDataAsync);
                        sb = new StringBuilder("");
                        
                        
                        }
                    
                        return null;
                        

            
            }


            [HttpPost("[action]")]
        public JsonResult Updatecomponents([FromBody] dynamic data)
                {
                    

                    StringBuilder sb = new StringBuilder("");
                    var json = (string)JsonConvert.SerializeObject(data);
                    //dynamic x = JsonConvert.DeserializeObject(json);
                    dynamic components = JsonConvert.DeserializeObject<List<dynamic>>(json);
                    //x.Count()
            
                        foreach(var data1 in components)
                        {
                        
                        sb.Append("Update components set BinaryName =");
                        sb.Append("'" + data1.BinaryName + "'");
                        sb.Append(",NameParameter=");
                        sb.Append("'" + data1.NameParameter + "'");
                        sb.Append(",ArgumentValue=");
                        sb.Append("'" + data1.ArgumentValue + "'");
                        sb.Append(",Detail=");
                        sb.Append("'" + data1.Detail + "' where UID =");
                        sb.Append("'" + data1.UID + "'");

                

                       var Response = ServiceRequest.MakeRequestLocal("1011", sb.ToString(), DB.GetDataAsync);
                        sb = new StringBuilder("");
                        
                        
                        }
                    
                        return null;
                        

            
            }

            }
}

