using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using MySql.Data.MySqlClient;
using Newtonsoft.Json;

namespace Mam_Configuration_Demo
{
    public class Program
    {
        public static string MyUrl = string.Empty;
        public static string DBServiceUrl = string.Empty;

        public static string DBName = string.Empty;


        public static string UploadRecords = string.Empty;

        public static string RealtimeInterval = string.Empty;
        public static string ServiceUrl { get; set; }
        public static string ConnectionString { get; set; }
        public static string publicquery { get; set; }

        public static string ServerUrl = string.Empty;


        public static void Main(string[] args)
        {
            var p = Directory.GetCurrentDirectory();
            var config = new ConfigurationBuilder()
                            .SetBasePath(p)
                           .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                           .AddEnvironmentVariables().Build();
            MyUrl = $"{config["Data:Url"]}";
            ServerUrl = $"{config["Data:ServerUrl"]}";
            DBServiceUrl = $"{config["Data:DBServiceUrl"]}";
            UploadRecords = $"{config["Data:UploadRecords"]}";
            DBName = $"{config["Data:DBName"]}";
            ConnectionString = $"{config["Data:ConnectionString"]}";
            RealtimeInterval = $"{config["Data:realtime interval"]}";
            var host = new WebHostBuilder()
                      .UseKestrel()
                      .UseUrls(MyUrl)
                       .UseContentRoot(Directory.GetCurrentDirectory())
                       .UseIISIntegration()
                       .UseStartup<Startup>()
                       .UseConfiguration(config)
                       .Build();
            host.Run();
        }
    }
    public class ConnectionClass
    {
        DataTable ds = new DataTable();
        public string Connect(string sql, string CmdType)
        {
            int flag = 0;
            try
            {
                using (MySqlConnection nwindConn = new MySqlConnection(Program.ConnectionString))
                {
                    if (nwindConn.State == ConnectionState.Closed)
                        nwindConn.Open();
                    using (MySqlCommand sqlCmd = new MySqlCommand(sql, nwindConn))
                    {
                        using (MySqlDataAdapter adapter = new MySqlDataAdapter(sql, nwindConn))
                        {
                            adapter.Fill(ds);
                            adapter.Dispose();
                            sqlCmd.Dispose();
                            flag = 1;
                            if (nwindConn.State == ConnectionState.Open)
                                nwindConn.Close();
                        }
                    }
                }
            }
            catch
            {
                flag = -1;
            }
            finally { }
            return (flag == -1) ? "{ResultData:2}" : DataTableToJSONWithJSONNet(ds, CmdType);
        }
        public string DataTableToJSONWithJSONNet(DataTable table, string Cmd)
        {
            string JSONString = string.Empty;
            JSONString = JsonConvert.SerializeObject(table);
            StringBuilder sb = new StringBuilder();
            sb.Append("{ResultData:");
            if (Cmd == "Select")
                sb.Append(JSONString);
            else sb.Append("1");
            sb.Append("}");
            return sb.ToString();
        }
    }
}
