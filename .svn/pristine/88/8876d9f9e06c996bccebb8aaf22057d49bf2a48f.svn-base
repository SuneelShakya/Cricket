import { Injectable, Inject } from '@angular/core';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';

@Injectable()
export class GenericService {
    IsLoginOk = false;
    data: any;
    clockgmt: any;
    TimeZones: any = [
        { name: "Eniwetok, Kwajalein", value: "-12:00", selected: false },
        { name: "Midway Island, Samoa", value: "-11:00", selected: false },
        { name: "Hawaii", value: "-10:00", selected: false },
        { name: "Taiohae", value: "-09:50", selected: false },
        { name: "Alaska", value: "-09:00", selected: false },
        { name: "Pacific Time (US &amp; Canada)", value: "-08:00", selected: false },
        { name: "Mountain Time (US &amp; Canada)", value: "-07:00", selected: false },
        { name: "Central Time (US &amp; Canada), Mexico City", value: "-06:00", selected: false },
        { name: "Eastern Time (US &amp; Canada), Bogota, Lima", value: "-05:00", selected: false },
        { name: "Caracas", value: "-04:50", selected: false },
        { name: "Atlantic Time (Canada), Caracas, La Paz", value: "-04:00", selected: false },
        { name: "Newfoundland", value: "-03:50", selected: false },
        { name: "Brazil, Buenos Aires, Georgetown", value: "-03:00", selected: false },
        { name: "Mid-Atlantic", value: "-02:00", selected: false },
        { name: "Azores, Cape Verde Islands", value: "-01:00", selected: false },
        { name: "Western Europe Time, London, Lisbon, Casablanca", value: "+00:00", selected: false },
        { name: "Brussels, Copenhagen, Madrid, Paris", value: "+01:00", selected: false },
        { name: "Kaliningrad, South Africa", value: "+02:00", selected: false },
        { name: "Baghdad, Riyadh, Moscow, St. Petersburg", value: "+03:00", selected: false },
        { name: "Tehran", value: "+03:50", selected: false },
        { name: "Abu Dhabi, Muscat, Baku, Tbilisi", value: "+04:00", selected: false },
        { name: "Kabul", value: "+04:50", selected: false },
        { name: "Ekaterinburg, Islamabad, Karachi, Tashkent", value: "+05:00", selected: false },
        { name: "Mumbai, Calcutta, Madras, New Delhi", value: "+05:50", selected: true },
        { name: "Kathmandu, Pokhara", value: "+05:75", selected: false },
        { name: "Almaty, Dhaka, Colombo", value: "+06:00", selected: false },
        { name: "Yangon, Mandalay", value: "+06:50", selected: false },
        { name: "Bangkok, Hanoi, Jakarta", value: "+07:00", selected: false },
        { name: "Beijing, Perth, Singapore, Hong Kong", value: "+08:00", selected: false },
        { name: "Eucla", value: "+08:75", selected: false },
        { name: "Tokyo, Seoul, Osaka, Sapporo, Yakutsk", value: "+09:00", selected: false },
        { name: "Adelaide, Darwin", value: "+09:50", selected: false },
        { name: "Eastern Australia, Guam, Vladivostok", value: "+10:00", selected: false },
        { name: "Lord Howe Island", value: "+10:50", selected: false },
        { name: "Magadan, Solomon Islands, New Caledonia", value: "+11:00", selected: false },
        { name: "Norfolk Island", value: "+11:50", selected: false },
        { name: "Auckland, Wellington, Fiji, Kamchatka", value: "+12:00", selected: false },
        { name: "Chatham Islands", value: "+12:75", selected: false },
        { name: "Apia, Nukualofa", value: "+13:00", selected: false },
        { name: "Line Islands, Tokelau", value: "+14:00", selected: false }
    ];
    timezone: any = "";
    constructor(
        public http: HttpClient,
        @Inject('BASE_URL') public AppUrl: string
    ) { }
    CheckLogin() {
        if (localStorage.getItem('loginsuccess') == "success") {
            this.IsLoginOk = true;
        }
        else {
            this.IsLoginOk = false;
        }
    }
    showTime() {
        var date = new Date();
        var h: any = date.getHours(); // 0 - 23
        var m: any = date.getMinutes(); // 0 - 59
        var s: any = date.getSeconds(); // 0 - 59
        var session = "AM";
        if (h == 0) {
            h = 12;
        }
        if (h > 12) {
            h = h - 12;
            session = "PM";
        }
        h = (h < 10) ? "0" + h : h;
        m = (m < 10) ? "0" + m : m;
        s = (s < 10) ? "0" + s : s;
        var time = h + ":" + m + ":" + s + " " + session;
        document.getElementById("MyClockDisplay").innerText = time;
        document.getElementById("MyClockDisplay").textContent = time;
        setTimeout(this.showTime, 1000);
    }
    saveAsJson(data: any): Observable<any> {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/saveAsJson';
        return http.post(url, data).pipe();
    }

    getJSON(jsonname: any, jsontype: any): Observable<any> {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/GetJson';
        return http
            .get(url, {
                params: {
                    filetype: jsontype,
                    filename: jsonname
                }
            })
            .pipe();
    }

    GetPresentCustomers(): Observable<any> {
        const http = this.http;
        const url = this.AppUrl + 'SampleData/GetPresentCustomers';
        return http.get(url).pipe();
    }

    GetAppVersion(): Observable<any> {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/GetAppVersion';
        return http
            .get(url, {
                params: {
                    test: "a"
                }
            })
            .pipe();
    }
    saveexcel(data: any): Observable<any> {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/InsertExcel';
        return http.post(url, data).pipe();
        //return http.get(url, { params: { month: data } }).pipe();
    }
    GetOperations(): Observable<any> {
        const http = this.http;
        const url = this.AppUrl + 'SampleData/GetOperations';
        return http.get(url).pipe();
    }


    GetUserDevices(): Observable<any> {
        const http = this.http;
        const url = this.AppUrl + 'SampleData/GetUserDevices';
        return http
            .get(url, {
                params: {
                    Channel: "@", AllData: "1", status: "@", system: "@"
                }
            })
            .pipe();
    }

    savefft(data: any): Observable<any> {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/City';
        return http.get(url, data).pipe();
    }
    fetchdata() {
        const http = this.http;
        const url = this.AppUrl + 'SampleData/fetchdata';
        return http.get(url).pipe();
    }

    uploadfile(fileToUpload: File, filename: any) {
        const formData: FormData = new FormData();
        fileToUpload = <File>fileToUpload;
        formData.append('file', fileToUpload, filename);
        const http = this.http;
        const url = this.AppUrl + 'SampleData/readfile';
        return http.post(url, formData).pipe();
    }
    getrealtimedata() {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/getrealtimedata';
        return http.get(url).pipe();
    }
    gettotaldata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/gettotaldata';
        return http.get(url, { params: { month: data } }).pipe();
    }

    getsearchlogdata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/getsearchlogdata';
        return http.post(url, data).pipe();
    }
    gethistoricdata(data: any): Observable<any> {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/gethistoricdata';
        return http.get(url, { params: { month: data } }).pipe();
        // return http.get(url, data).pipe();
    }
    getalarmname(data: any): Observable<any> {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/getalarmname';
        return http.get(url, { params: { month: data } }).pipe();
        // return http.get(url, data).pipe();
    }

    savelogstate(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/savelogstate';
        return http.post(url, data).pipe();
    }

    totalsearch(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/totalsearch';
        return http.post(url, data).pipe();
    }
    getchannelwisedata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/getchannelwisedata';
        return http.get(url, { params: { month: data } }).pipe();
    }

    getlogdata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/getlogdata';
        return http.get(url, { params: { month: data } }).pipe();
    }

    getalarmwisedata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/getalarmwisedata';
        return http.get(url, { params: { month: data } }).pipe();
    }
    getexceldata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/getexceldata';
        return http.get(url, { params: { month: data } }).pipe();
    }
    getsatellitedata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/getsatellitedata';
        return http.get(url, { params: { month: data } }).pipe();
    }


    submitDBdata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/submitDBdata';
        return http.post(url, data).pipe();
    }

    CreateDB(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/CreateDB';
        return http.post(url, data).pipe();
    }

    checkpackage() {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/checkpackage';
        return http.get(url).pipe();
    }
    checkdb() {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/checkdb';
        return http.get(url).pipe();
    }

    checkinspectorstatus(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/checkinspectorstatus';
        return http.get(url, { params: { inspecdata: data } }).pipe();
    }

    Insertinspectordata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/Insertinspectordata';
        return http.post(url, data).pipe();
    }

    InsertComponentdata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/InsertComponentdata';
        return http.post(url, data).pipe();
    }


    Inserttransactiondata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/Inserttransactiondata';
        return http.post(url, data).pipe();
    }

    Insertcomponents(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/Insertcomponents';
        return http.post(url, data).pipe();
    }

    Updatecomponents(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/Updatecomponents';
        return http.post(url, data).pipe();
    }

    // Insertflowdata(data:any) {
    //     const http = this.http;
    //     const url = this.AppUrl + 'api/SampleData/Insertflowdata';
    //     return http.get(url,{ params: { inspecdata: data } }).pipe();
    // }
    Insertflowdata(data: any): Observable<any> {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/Insertflowdata';
        return http.post(url, data).pipe();
    }
    InsertGroupdata(data: any): Observable<any> {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/InsertGroupdata';
        return http.post(url, data).pipe();
    }
    DeleteGroupdata(data: any): Observable<any> {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/DeleteGroupdata';
        return http.post(url, data).pipe();
    }
    Insertprofiledata(data: any): Observable<any> {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/Insertprofiledata';
        return http.post(url, data).pipe();
    }

    InsertUserdata(data: any): Observable<any> {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/InsertUserdata';
        return http.post(url, data).pipe();
    }

    updateinspectordata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/updateinspectordata';
        return http.get(url, { params: { inspecdata: data } }).pipe();
    }

    updateflowdata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/updateflowdata';
        return http.get(url, { params: { inspecdata: data } }).pipe();
    }



    updatecomponentdata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/updatecomponentdata';
        return http.post(url, data).pipe();
    }

    fetchinspectordata() {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/fetchinspectordata';
        return http.get(url).pipe();
    }
    fetchGroupdata() {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/fetchGroupdata';
        return http.get(url).pipe();
    }


    fetchComponents(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/fetchComponents';
        return http.get(url, { params: { binary: data } }).pipe();
    }

    Insertflowcomp(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/Insertflowcomp';
        return http.post(url, data).pipe();
    }



    updateflowcomp(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/updateflowcomp';
        return http.post(url, data).pipe();
    }



    fetchComponentdata() {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/fetchComponentdata';
        return http.get(url).pipe();
    }
    fetchtransactiondata() {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/fetchtransactiondata';
        return http.get(url).pipe();
    }

    fetchflowcomp(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/fetchflowcomp';
        return http.get(url, { params: { id: data } }).pipe();
    }

    fetchUID(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/fetchUID';
        return http.get(url, { params: { id: data } }).pipe();
    }

    fetchflowdata() {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/fetchflowdata';
        return http.get(url).pipe();
    }
    fetchprofiledata() {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/fetchprofiledata';
        return http.get(url).pipe();
    }
    fetchUserdata() {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/fetchUserdata';
        return http.get(url).pipe();
    }
    fetchflowdetails(uid: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/fetchflowdetails';
        return http.get(url, { params: { uid: uid } }).pipe();
    }

    fetchinspectorname() {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/fetchinspectorname';
        return http.get(url).pipe();
    }

    fetchcomponentname() {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/fetchcomponentname';
        return http.get(url).pipe();
    }

    deleteinspectordata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/deleteinspectordata';
        return http.get(url, { params: { id: data } }).pipe();
    }


    deletecomponentdata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/deletecomponentdata';
        return http.get(url, { params: { id: data } }).pipe();
    }


    deletecomponent(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/deletecomponent';
        return http.get(url, { params: { id: data } }).pipe();
    }

    deleteflowdata(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/deleteflowdata';
        return http.get(url, { params: { id: data } }).pipe();
    }

    deleteflowrow(data: any) {
        const http = this.http;
        const url = this.AppUrl + 'api/SampleData/deleteflowrow';
        return http.get(url, { params: { id: data } }).pipe();
    }

}
