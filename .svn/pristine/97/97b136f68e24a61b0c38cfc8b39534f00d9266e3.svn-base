import { Component, Inject, OnInit } from '@angular/core';
import { GenericService } from '../services/Generic.service';
import { MatSnackBar } from '@angular/material/snack-bar';
//import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';
//import { MatChipInputEvent } from '@angular/material/chips';
import { MatDialogRef, MatDialog } from '@angular/material/dialog';
//import * as $ from 'jquery';
@Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.css']

})
export class UserComponent implements OnInit {
  objCls: UserProperties = new UserProperties();
  groupdata: any = [];
  popup: any = "";
  BtnText: any = "";
  flowdata: any;
  EditMainIndex: any;
  deleteuid: any;
  isLoading: boolean;
  groupid: any;
  BindGroupName: any;
  constructor(
    public objService: GenericService, private _snackBar: MatSnackBar, public dialog: MatDialog) { }
  ngOnInit() {
    this.fetchdata();
    this.fetchgroupdata();
  };

  openSnackBar(message: string, action: string) {
    this._snackBar.open(message, action, {
      duration: 2000,
    });
  }
  Reset() {
    //this.CancelEditPartial();
    this.objCls = new UserProperties();
    this.popup = "";
    this.BtnText = "";
    this.fetchdata();
  }
  fetchdata() {
    this.objService.fetchUserdata().subscribe((datas: any) => {
      //var x = JSON.parse(datas);
      if (datas.ResultData.length > 0)
        this.flowdata = datas.ResultData;
    });
  }
  fetchgroupdata() {
    this.objService.fetchGroupdata().subscribe((datas: any) => {
      //var x = JSON.parse(datas);
      if (datas.ResultData.length > 0)
        this.BindGroupName = datas.ResultData.map(item => item.Name).filter((value, index, self) => self.indexOf(value) === index);
    });
  }
  Editmain(obj, i) {
    this.EditMainIndex = i;
    this.objCls.UID = obj.UID;
    this.objCls.Name = obj.Name;
    this.objCls.Username = obj.Username;
    this.objCls.Password = obj.Password;
    this.objCls.Remarks = obj.Remarks;
    this.objCls.emailid = obj.emailid;//.split(',');
    this.objCls.primarymobile = obj.primarymobile;//.split(',');
    this.objCls.secondarymobile = obj.secondarymobile;//.split(',');
    this.objCls.GroupId = obj.GroupId;//.split(',');
    this.objCls.IsActive = obj.IsActive == true ? 1 : 0;
    this.popup = "Edit";
    this.BtnText = "Update";
    this.openDialog('open');
  }
  saveFlow() {
    //alert(this.objCls.Parameters);
    //var x = this.objCls.Parameters.join(',');
    //this.objCls.Parameters = x;
    this.isLoading = true;
    this.objCls.OperationName = this.BtnText;
    this.objService.InsertUserdata(this.objCls).subscribe((datas: any) => {
      if (datas.toLowerCase() == "success") {
        this.openSnackBar("New User " + this.objCls.OperationName + " successfully", "Success");
        this.Reset();
        this.openDialog("close");
        this.isLoading = false;
      }
      else if (datas.toLowerCase() == "fail") {
        this.openSnackBar("New User not " + this.objCls.OperationName + "", "Warning");
        this.isLoading = false;
      }
    });
  }
  deleteFlow() {
    this.isLoading = true;
    this.objCls.OperationName = "Delete";
    this.objCls.UID = this.deleteuid;
    //this.objCls.GroupId = this.groupid;
    this.objService.InsertUserdata(this.objCls).subscribe((datas: any) => {
      if (datas.toLowerCase() == "success") {
        this.openSnackBar("User Deleted successfully", "Success");
        this.Reset();
        //this.openDialog("close");
        this.HideDialog();
        this.isLoading = false;
      }
      else if (datas.toLowerCase() == "fail") {
        this.openSnackBar("User is already in use", "Error");
        this.HideDialog();
        this.isLoading = false;
      }
    });
  }
  AddNew(val) {
    this.objCls = new UserProperties();
    this.popup = "Create New";
    this.BtnText = "Save";
    // this.objService.data = this.objCls;
    // const dialogRef = this.dialog.open(DialogUserCreate, {
    //   width: '60vw'
    // });
    // dialogRef.beforeClosed().subscribe((result: any) => {
    //   this.objCls = result;
    //   this.saveFlow();
    //   console.log(result);
    // });
    this.openDialog(val);
  }

  openDialog(val) {
    var modal = document.getElementById("entryModal");
    modal.style.display = val == 'open' ? "block" : "none";
  }
  Deletemain(val) {
    var modal = document.getElementById("deleteModal");
    modal.style.display = "block";
    this.deleteuid = val;
    //this.groupid = val1;
  }
  HideDialog() {
    var modal = document.getElementById("deleteModal");
    modal.style.display = "none";
  }
}

class UserProperties {
  UID: any = "0";
  Name: any = "";
  IsActive: any = "";
  Username: any = "";
  Password: any = "";
  Remarks: any = "";
  emailid: any = "";
  primarymobile: any = "";
  secondarymobile: any = "";
  GroupId: any = "";
  OperationName: any = "";
}

// @Component({
//   selector: 'User-dialog-CD',
//   templateUrl: 'Usercd.component.html',
// })
// export class DialogUserCreate {
//   addOnBlur = true;
//   //readonly separatorKeysCodes: number[] = [ENTER, COMMA, SPACE];
//   readonly separatorKeysCodes: number[] = [ENTER];
//   selectable = true;
//   removable = true;
//   data: any;
//   popup: any = "Create";
//   BtnText: any = "Save";
//   constructor(
//     public dialogRef: MatDialogRef<DialogUserCreate>, private snackBar: MatSnackBar, public dialogser: GenericService) {
//     this.data = this.dialogser.data;
//   }
//   onNoClick(): void {
//     this.dialogRef.close();
//   }
//   add(event: MatChipInputEvent, key: any): void {
//     const input = event.input;
//     const value = event.value;
//     // Add our fruit
//     if ((value || '').trim()) {
//       const index = this.data[key].indexOf(value);
//       if (index >= 0) {
//         this.snackBar.open("Parameter already exits!!", "Error", {
//           duration: 2000,
//         });
//         //this.openSnackBar("Parameter already exits!!", "Error");
//       }
//       else
//         this.data[key].push(value.trim());
//       //this.fruits.push({ name: value.trim() });
//     }
//     // Reset the input value
//     if (input) {
//       input.value = '';
//     }
//     //alert(this.objCls[key]);
//   }
//   remove(fruit: any, key: any): void {
//     const index = this.data[key].indexOf(fruit);
//     if (index >= 0) {
//       this.data[key].splice(index, 1);
//     }
//   }
// }

// @Component({
//   selector: 'User-dialog-CD',
//   templateUrl: 'Usercd.component.html',
// })
// export class DialogUserEdit {
//   data: any;
//   popup: any;
//   constructor(
//     public dialogRef: MatDialogRef<DialogUserEdit>, public dialogser: GenericService) {
//     this.data = this.dialogser.data;
//     this.popup = "Edit";
//   }
//   onNoClick(): void {
//     this.dialogRef.close();
//   }
// }