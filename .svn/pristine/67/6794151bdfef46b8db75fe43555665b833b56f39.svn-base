import { Component, Inject, OnInit } from '@angular/core';
import { GenericService } from '../services/Generic.service';
import { MatSnackBar } from '@angular/material/snack-bar';
//import { MatDialogRef, MatDialog } from '@angular/material/dialog';
import * as $ from 'jquery';
@Component({
  selector: 'app-group',
  templateUrl: './group.component.html',
  styleUrls: ['./group.component.css']

})
export class GroupComponent implements OnInit {
  objCls: GroupProperties = new GroupProperties();
  hideonNew: boolean = true;
  Layouts: any = [
    { Menu: "Inspector", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
    { Menu: "Component", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
    { Menu: "Profile", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
    { Menu: "WorkFlow", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
    { Menu: "Transaction", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false }
  ];
  Name1: any = "";
  popup: any = "";
  BtnText: any = "";
  flowdata: any;
  EditMainIndex: any = "-1";
  deleteuid: any;
  isLoading: boolean;
  EditLayoutindex: any;
  BindGroupName: any;
  Menu: any;
  constructor(
    public objService: GenericService, private _snackBar: MatSnackBar) { }
  ngOnInit() {
    this.fetchdata();

  };
  openSnackBar(message: string, action: string) {
    this._snackBar.open(message, action, {
      duration: 2000,
    });
  }
  ResetBtn() {
    this.Name1 = "";
    this.objCls.Name = "";
    this.hideonNew = true;
  }
  onselectChange(event) {
    //var c = event.value;
    if (event.value != "-1") {
      const ids = [];
      ids.push(event.value);
      var x = this.flowdata.filter((i: any) => ids.includes(i.Name));
      this.Layouts = [
        { Menu: "Inspector", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
        { Menu: "Component", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
        { Menu: "Profile", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
        { Menu: "WorkFlow", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
        { Menu: "Transaction", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false }
      ];
      for (let index = 0; index < x.length; index++) {
        var t = this.Layouts.findIndex((record: any) => record.Menu == x[index].Menu);
        if (t != -1) {
          this.Layouts[t].hidden = true;
          this.Layouts[t].Read = x[index].Read;
          this.Layouts[t].Write = x[index].Write;
          this.Layouts[t].Delete = x[index].Delete;
          this.Layouts[t].IsActive = x[index].IsActive;
        }
      }
    }
    else {
      this.Layouts = [
        { Menu: "Inspector", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
        { Menu: "Component", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
        { Menu: "Profile", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
        { Menu: "WorkFlow", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
        { Menu: "Transaction", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false }
      ];
    }
  }
  Reset() {
    //this.CancelEditPartial();
    this.objCls = new GroupProperties();
    this.popup = "";
    this.BtnText = "";
    this.fetchdata();
  }
  setAll(completed: boolean, key: any, index: any) {
    this.Layouts[index][key] = (completed) ? "Y" : "N";
  }
  fetchdata() {
    this.isLoading = true;
    this.objService.fetchGroupdata().subscribe((datas: any) => {
      //var x = JSON.parse(datas);
      if (datas.ResultData.length > 0) {
        this.flowdata = datas.ResultData;
      }
      this.BindGroupName = this.flowdata.map(item => item.Name).filter((value, index, self) => self.indexOf(value) === index);
      this.isLoading = false;
    });
  }
  Editmain(obj, i) {
    this.EditLayoutindex = this.Layouts.findIndex((record: any) => record.Menu == obj.Menu);
    this.Layouts = [
      { Menu: "Inspector", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: true },
      { Menu: "Component", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: true },
      { Menu: "Profile", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: true },
      { Menu: "WorkFlow", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: true },
      { Menu: "Transaction", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: true }
    ];
    this.Layouts[this.EditLayoutindex].hidden = false;
    this.Layouts[this.EditLayoutindex].Read = obj.Read;
    this.Layouts[this.EditLayoutindex].Write = obj.Write;
    this.Layouts[this.EditLayoutindex].Delete = obj.Delete;
    this.EditMainIndex = i;
    this.objCls.UID = obj.UID;
    this.objCls.Name = obj.Name;
    //this.objCls.GroupType = obj.GroupType;
    //this.objCls.Inputfile = obj.Inputfile;
    //this.objCls.Outputfile = obj.Outputfile;
    //this.objCls.Parameters = obj.Parameters;//.split(',');
    this.objCls.GroupActive = obj.IsActive.toString();
    this.popup = "Edit";
    this.BtnText = "Update";
    this.openDialog('open');
  }
  saveFlow() {
    this.isLoading = true;
    var x;
    var result;
    var uid = this.objCls.UID;
    var Name = (this.Name1 == "") ? this.objCls.Name : this.Name1;
    var on = this.BtnText;
    this.objCls.GroupDetails = (on == "Save") ? this.Layouts : this.Layouts[this.EditLayoutindex];
    this.objCls.OperationName = this.BtnText;
    if (on == "Save") {
      result = this.Layouts.map(function (el) {
        var o = Object.assign({}, el);
        o.UID = uid;
        o.GroupActive = "1";
        o.Name = Name;
        o.OperationName = on;
        return o;
      });
      x = {
        data: result
      }
    }
    else {
      var r = []; r.push(this.Layouts[this.EditLayoutindex]);
      result = r.map(function (el) {
        var o = Object.assign({}, el);
        o.UID = uid;
        o.GroupActive = "1";
        o.Name = Name;
        o.OperationName = on;
        return o;
      });
      x = {
        data: result
      }
    }
    this.objService.InsertGroupdata(x).subscribe((datas: any) => {
      if (datas.toLowerCase() == "success") {
        this.openSnackBar("New Group " + this.objCls.OperationName + " successfully", "Success");
        this.Reset();
        this.openDialog("close");
        this.isLoading = false;
      }
      else if (datas.toLowerCase() == "fail") {
        this.openSnackBar("New Group not " + this.objCls.OperationName + "", "Warning");
        this.isLoading = false;
      }
    });
  }
  deleteFlow() {
    this.isLoading = true;
    this.objCls.OperationName = "Delete";
    this.objCls.UID = this.deleteuid;
    this.objService.DeleteGroupdata(this.objCls).subscribe((datas: any) => {
      if (datas.toLowerCase() == "success") {
        this.openSnackBar("Group Deleted successfully", "Success");
        this.Reset();
        this.HideDialog();
        this.isLoading = false;
      }
      else if (datas.toLowerCase() == "fail") {
        this.openSnackBar("Group is already is use", "Error");
        this.isLoading = false;
      }
    });
  }
  AddNew(val) {
    this.Layouts = [
      { Menu: "Inspector", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
      { Menu: "Component", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
      { Menu: "Profile", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
      { Menu: "WorkFlow", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false },
      { Menu: "Transaction", Read: "Y", Write: "Y", Delete: "Y", IsActive: 1, hidden: false }
    ];
    this.objCls = new GroupProperties();
    this.popup = "Create New";
    this.BtnText = "Save";
    // this.objService.data = this.objCls;
    // const dialogRef = this.dialog.open(DialogGroupCreate, {
    //   width: '60vw'
    // });
    // dialogRef.beforeClosed().subscribe((result: any) => {
    //   this.objCls = result;
    //   this.saveFlow();
    //   console.log(result);
    // });
    this.openDialog(val);
  }

  openDialog(val) {
    var modal = document.getElementById("entryModal");
    modal.style.display = val == 'open' ? "block" : "none";
    if (val == "close") {
      this.EditMainIndex = "-1";
    }
  }
  Deletemain(val, menu) {
    var modal = document.getElementById("deleteModal");
    modal.style.display = "block";
    this.deleteuid = val;
    this.Menu = menu;
  }
  HideDialog() {
    var modal = document.getElementById("deleteModal");
    modal.style.display = "none";
  }
}

class GroupProperties {
  UID: any = "0";
  Name: any = "";
  GroupActive: any = "";
  GroupDetails: any = [];
  OperationName: any = "";
}


// @Component({
//   selector: 'Group-dialog-CD',
//   templateUrl: 'Groupcd.component.html',
// })
// export class DialogGroupEdit {
//   data: any;
//   popup: any;
//   constructor(
//     public dialogRef: MatDialogRef<DialogGroupEdit>, public dialogser: GenericService) {
//     this.data = this.dialogser.data;
//     this.popup = "Edit";
//   }
//   onNoClick(): void {
//     this.dialogRef.close();
//   }
// }