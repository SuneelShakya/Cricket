import { Component, Inject, OnInit } from '@angular/core';
import { GenericService } from '../services/Generic.service';
import { MatSnackBar } from '@angular/material/snack-bar';
import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';
import { MatChipInputEvent } from '@angular/material/chips';
//import * as $ from 'jquery';
@Component({
  selector: 'app-profile',
  templateUrl: './profile.component.html',
  styleUrls: ['./profile.component.css']

})
export class ProfileComponent implements OnInit {
  objCls: ProfileProperties = new ProfileProperties();
  componentdata: any = [];
  popup: any = "";
  BtnText: any = "";
  flowdata: any;
  EditMainIndex: any;
  deleteuid: any;
  isLoading: boolean;
  addOnBlur = true;
  //readonly separatorKeysCodes: number[] = [ENTER, COMMA, SPACE];
  readonly separatorKeysCodes: number[] = [ENTER];
  selectable = true;
  removable = true;
  constructor(
    public objService: GenericService, private _snackBar: MatSnackBar) { 
   
    

    }
  ngOnInit() {
    this.fetchdata();
  };
  add(event: MatChipInputEvent, key: any): void {
    const input = event.input;
    const value = event.value;
    // Add our fruit
    if ((value || '').trim()) {
      const index = this.objCls[key].indexOf(value);
      if (index >= 0) {
        this.openSnackBar("Parameter already exits!!", "Error");
      }
      else
        this.objCls[key].push(value.trim());
      //this.fruits.push({ name: value.trim() });
    }
    // Reset the input value
    if (input) {
      input.value = '';
    }
    //alert(this.objCls[key]);
  }
  remove(fruit: any, key: any): void {
    const index = this.objCls[key].indexOf(fruit);
    if (index >= 0) {
      this.objCls[key].splice(index, 1);
    }
  }
  openSnackBar(message: string, action: string) {
    this._snackBar.open(message, action, {
      duration: 2000,
    });
  }
  Reset() {
    //this.CancelEditPartial();
    this.objCls = new ProfileProperties();
    this.popup = "";
    this.BtnText = "";
    this.fetchdata();
  }
  fetchdata() {
    this.objService.fetchprofiledata().subscribe((datas: any) => {
      //var x = JSON.parse(datas);
      if (datas.ResultData.length > 0)
        this.flowdata = datas.ResultData;
    });
  }
  Editmain(obj, i) {
    this.EditMainIndex = i;
    this.objCls.UID = obj.UID;
    this.objCls.Name = obj.Name;
    this.objCls.ProfileType = obj.ProfileType;
    this.objCls.Inputfile = obj.Inputfile;
    this.objCls.Outputfile = obj.Outputfile;
    this.objCls.Parameters = obj.Parameters.split(',');
    this.objCls.IsActive = obj.IsActive;
    this.popup = "Edit";
    this.BtnText = "Update";
    this.openDialog('open');
  }
  saveFlow() {
    //alert(this.objCls.Parameters);
    var x = this.objCls.Parameters.join(',');
    this.objCls.Parameters = x;
    this.isLoading = true;
    this.objCls.OperationName = this.BtnText;
    this.objService.Insertprofiledata(this.objCls).subscribe((datas: any) => {
      if (datas.toLowerCase() == "success") {
        this.openSnackBar("New Profile " + this.objCls.OperationName + " successfully", "Success");
        this.Reset();
        this.openDialog("close");
        this.isLoading = false;
      }
      else if (datas.toLowerCase() == "fail") {
        this.openSnackBar("New Profile not " + this.objCls.OperationName + "", "Warning");
        this.isLoading = false;
      }
    });
  }
  deleteFlow() {
    this.isLoading = true;
    this.objCls.OperationName = "Delete";
    this.objCls.UID = this.deleteuid;
    this.objService.Insertprofiledata(this.objCls).subscribe((datas: any) => {
      if (datas.toLowerCase() == "success") {
        this.openSnackBar("Profile Deleted successfully", "Success");
        this.Reset();
        //this.openDialog("close");
        this.HideDialog();
        this.isLoading = false;
      }
      else if (datas.toLowerCase() == "fail") {
        this.openSnackBar("Profile not deleted due to system error", "Error");
        this.isLoading = false;
      }
    });
  }
  AddNew(val) {
    this.objCls = new ProfileProperties();
    this.popup = "Create New";
    this.BtnText = "Save";
    this.openDialog(val);
  }

  openDialog(val) {
    var modal = document.getElementById("entryModal");
    modal.style.display = val == 'open' ? "block" : "none";
  }
  Deletemain(val) {
    var modal = document.getElementById("deleteModal");
    modal.style.display = "block";
    this.deleteuid = val;
  }
  HideDialog() {
    var modal = document.getElementById("deleteModal");
    modal.style.display = "none";
  }
}

class ProfileProperties {
  UID: any = "0";
  Name: any = "";
  IsActive: any = "";
  ProfileType: any = "";
  Inputfile: any = "";
  Outputfile: any = "";
  Parameters: any = [];
  OperationName: any = "";
}