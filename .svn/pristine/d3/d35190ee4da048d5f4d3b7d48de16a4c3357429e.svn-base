import { Component, Inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { GenericService } from '../services/Generic.service';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Router } from '@angular/router';
import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { DialogData } from '../home/home.component';
import { FormBuilder, FormGroup } from '@angular/forms';
import $ from "jquery";
import { Observable } from 'rxjs';


@Component({
  selector: 'app-fetch-data',
  templateUrl: './fetch-data.component.html',
  styleUrls: ['./fetch-data.component.css']

})
export class FetchDataComponent {
  public forecasts: WeatherForecast[];
  inspectordata: any;
  name: any;
  animal: any;
  EditIndex: any;
  SystemIP: string;
  Recieveport: string;
  Inspectorname: string;
  Binaryname: string;
  TXport: string;
  version: any;
  status: number;
  Response: any;
  statusclass: any;
  flag:number=1;
  timehandle: any;


  constructor(
    public objService: GenericService, public dialog: MatDialog, private _snackBar: MatSnackBar, public router: Router) {


  }

  ngOnInit() {
    this.fetchinspectordata();
    this.timehandle = setInterval(() => {
      this.fetchinspectordata();
  
  
    }, 60000);

  };
 


  fetchinspectordata() {
    this.objService.fetchinspectordata().subscribe((datas: any) => {
      if (datas.result.length > 0) {
        this.inspectordata = JSON.parse(datas.result)
        this.inspectordata = this.inspectordata.ResultData;
      }
    });
  }

  clone(val: any) {
    this.inspectordata.splice(val + 1, 0, { UID: "nouid", Name: this.inspectordata[val].Name, BinaryName: this.inspectordata[val].BinaryName, SystemIP: this.inspectordata[val].SystemIP, PortRx: this.inspectordata[val].PortRx, PortTx: this.inspectordata[val].PortTx, status: this.inspectordata[val].status,IsActive:this.inspectordata[val].IsActive,OSType:this.inspectordata[val].OSType,Remark:this.inspectordata[val].Remark, Version: this.inspectordata[val].Version, LastScan: this.inspectordata[val].LastScan })
  }




  delete(val: any) {
    this.opendeleteDialog(val);
    // this.inspectordata.splice(val,1);

  }


  openDialog(): void {
    const dialogRef = this.dialog.open(Fetchdialog, {
      // width: '50vw',
      height: '450px',
      data: { name: this.name, animal: this.animal }
    });

  }

 

  Insertinspectordata() {
    //  this.inspectordata.push({InspectorIp:this.SystemIP,InspectorPort:this.Recieveport});
    this.inspectordata = "refresh$" + this.status;
    this.objService.updateinspectordata(this.inspectordata).subscribe((datas: any) => {
      if (datas.result.length > 0) {
        this.Response = datas.result;
        this.Response = this.Response

        //  this.fetch.fetchinspectordata();


        this.router.navigateByUrl('/counter', { skipLocationChange: true }).then(() => {
          this.router.navigate(['/fetch-data']);
        });



      }
    });
  }




  openeditDialog(data: any): void {
    const dialogRef = this.dialog.open(Fetcheditdialog, {
      // width: '50vw',
      height: '400px',
      data: { index: data, Name: this.inspectordata }
    });

  }

  opendeleteDialog(data: any): void {
    const dialogRef = this.dialog.open(Fetchdeletedialog, {
      width: '400px',
      height: '150px',
      data: { index: data, Name: this.inspectordata }
    });

  }

}

@Component({
  selector: 'dialog-overview-fetch-dialog',
  templateUrl: 'fetch-dialog.component.html',
})
export class Fetchdialog {

  username: any = "";
  password: any = "";
  Port: any = "";
  dbinfo: any = [];
  IP: any;
  Response: any;
  splitdata: any;
  DBname: any;
  MAMDBuser: any;
  DBCheck: any;
  MAMDBpassword: any;
  Inspectorname: any;
  Binaryname: any;
  Path: any;
  SystemIP: any;
  Recieveport: any;
  TXport: any;
  Comments: any;
  tags: any;
  inspectordata: any = [];
  DBCreate: any;
  version: any;
  status: number;
  timehandle: any;
  items = [];

  public options = {
    readonly: undefined,
    placeholder: '+ Tag'
  };
  form: FormGroup;
  IsActive: string;
  OSType: string;
  Remark: string;
  
  constructor(
    public dialogRef: MatDialogRef<Fetchdialog>, private _formBuilder: FormBuilder, public objService: GenericService, private _snackBar: MatSnackBar, public router: Router,
    @Inject(MAT_DIALOG_DATA) public data: DialogData) {
    this.form = new FormBuilder().group({
      chips: [['chip'], []]
    });
  }
  ngOnInit() {
    // this.timehandle = setInterval(() => {
    //   this.checkinspectorstatus();


    // }, 5000);

  };
  Prerequisites: any = [];
  onNoClick(): void {
    this.dialogRef.close();
  }






  checkinspectorstatus() {
    //  this.inspectordata.push({InspectorIp:this.SystemIP,InspectorPort:this.Recieveport});
    this.inspectordata = this.SystemIP + "$" + this.Recieveport + "$" + this.Inspectorname + "$" + this.Binaryname + "$" + this.TXport;
    this.objService.checkinspectorstatus(this.inspectordata).subscribe((datas: any) => {
      if (datas.result.length > 0) {
        this.version = datas.result;
        if (this.version == "false") {
          this.status = 0;
          this.version = "";
        }
        else {
          this.status = 1;
        }
        this.Insertinspectordata();
        this.dialogRef.close()
        this.openSnackBar("Inspector Created", "Successfully");
        this.router.navigateByUrl('/counter', { skipLocationChange: true }).then(() => {
          this.router.navigate(['/fetch-data']);
        });
        //  this.dialogRef.close();
      }
      
    });
  }

  onAdding(tag) {
    this.items.push(tag)
  }

  public transform(value: string): Observable<object> {
    const item = { display: `@${value}`, value: `@${value}` };
    return Observable.throw(item);
  }

  Insertinspectordata() {
    //  this.inspectordata.push({InspectorIp:this.SystemIP,InspectorPort:this.Recieveport});
    this.items.toString();

    this.inspectordata = this.Inspectorname + "$" + this.Binaryname + "$" + this.SystemIP + "$" + this.Recieveport + "$" + this.TXport + "$" + this.status + "$" + this.IsActive + "$" + this.OSType + "$" + this.version + "$" + this.Comments + "$" + this.items;
    this.objService.Insertinspectordata(this.inspectordata).subscribe((datas: any) => {
      if (datas.result.length > 0) {
        this.Response = datas.result;
        this.Response = this.Response

      }
      this.dialogRef.close();

      // this.router.navigateByUrl('/counter', { skipLocationChange: true }).then(() => {
      //   this.router.navigate(['/fetch-data']);
      // });
    });
  }









  openSnackBar(message: string, action: string) {
    this._snackBar.open(message, action, {
      duration: 2000,
    });
  }

}


@Component({
  selector: 'dialog-overview-fetch-dialog',
  templateUrl: 'fetchedit-dialog.component.html',
})
export class Fetcheditdialog {

  username: any = "";
  password: any = "";
  Port: any = "";
  dbinfo: any = [];
  IP: any;
  Response: any;
  splitdata: any;
  DBname: any;
  MAMDBuser: any;
  DBCheck: any;
  MAMDBpassword: any;
  Inspectorname: any;
  Binaryname: any;
  Path: any;
  SystemIP: any;
  Recieveport: any;
  TXport: any;
  Comments: any;
  tags: any;
  inspectordata: any = [];
  DBCreate: any;
  version: any;
  status: number;
  timehandle: any;
  OSType: any;
  IsActive: any;
  Remark: any;
  constructor(
    public dialogRef: MatDialogRef<Fetcheditdialog>, private _formBuilder: FormBuilder, public objService: GenericService, private _snackBar: MatSnackBar, public router: Router, public fetch: FetchDataComponent,
    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }
  ngOnInit() {
    this.edit();
    

  };
  Prerequisites: any = [];
  onNoClick(): void {
    this.dialogRef.close();
  }



  edit() {
    this.data;
    this.Inspectorname = this.data.Name[this.data.index].Name;
    this.Binaryname = this.data.Name[this.data.index].BinaryName;
    this.SystemIP = this.data.Name[this.data.index].SystemIP;
    // this.Path=this.data.Name[this.data.index].Path;
    this.Recieveport = this.data.Name[this.data.index].PortRx;
    this.TXport = this.data.Name[this.data.index].PortTx;
    this.version = this.data.Name[this.data.index].Version;
    this.status = this.data.Name[this.data.index].status;
    this.OSType = this.data.Name[this.data.index].OSType;
    this.IsActive = this.data.Name[this.data.index].IsActive;
    this.Remark = this.data.Name[this.data.index].Remark;
  }




  checkinspectorstatus() {
    //  this.inspectordata.push({InspectorIp:this.SystemIP,InspectorPort:this.Recieveport});
    this.inspectordata = this.SystemIP + "$" + this.Recieveport + "$" + this.Inspectorname + "$" + this.Binaryname + "$" + this.TXport;
    this.objService.checkinspectorstatus(this.inspectordata).subscribe((datas: any) => {
      if (datas.result == "false") {
        this.status = 0;
        this.version="";
      }
      else {
        this.version = datas.result;
        this.status = 1;
      }
      this.Insertinspectordata();
      // if (datas.result.length > 0) {
      //   this.version = datas.result;
      //   if (this.version == "false") {
      //     this.status = 0;
      //   }
      //   else {
      //     this.status = 1;
      //   }
      //   this.Insertinspectordata();


      // }
    });
  }

  Insertinspectordata() {
    //  this.inspectordata.push({InspectorIp:this.SystemIP,InspectorPort:this.Recieveport});
    this.inspectordata = this.Inspectorname + "$" + this.Binaryname + "$" + this.SystemIP + "$" + this.Recieveport + "$" + this.TXport + "$" + this.OSType + "$" + this.IsActive + "$" + this.version + "$" + this.status + "$" + this.data.Name[this.data.index].UID;
    this.objService.updateinspectordata(this.inspectordata).subscribe((datas: any) => {
      if (datas.result.length > 0) {
        this.Response = datas.result;
        this.Response = this.Response

        //  this.fetch.fetchinspectordata();
        this.openSnackBar("Inspector Updated", "Successfully");

        this.dialogRef.close();
        //window.location.href = window.location.href;
        this.router.navigateByUrl('/counter', { skipLocationChange: true }).then(() => {
          this.router.navigate(['/fetch-data']);
        });
      }
    });
  }









  openSnackBar(message: string, action: string) {
    this._snackBar.open(message, action, {
      duration: 2000,
    });
  }

}

@Component({
  selector: 'dialog-overview-fetch-dialog',
  templateUrl: 'fetchdelete-dialog.component.html',
})
export class Fetchdeletedialog {
  Response: any;
  constructor(
    public dialogRef: MatDialogRef<Fetchdeletedialog>, private _formBuilder: FormBuilder, public objService: GenericService, private _snackBar: MatSnackBar, public router: Router, public fetch: FetchDataComponent,
    @Inject(MAT_DIALOG_DATA) public data: DialogData) { }
  ngOnInit() {
    // this.deleteinspectordata();

  };

  onNoClick(): void {
    this.dialogRef.close();
  }

  deleteinspectordata() {
    //  this.inspectordata.push({InspectorIp:this.SystemIP,InspectorPort:this.Recieveport});


    this.objService.deleteinspectordata(this.data.Name[this.data.index].UID).subscribe((datas: any) => {
      if (datas.length > 0) {
        this.Response = datas;
        this.Response = this.Response
        if(this.Response=="0"){
          this.openSnackBar("Row Deleted", "Successfully");
          

      }
      else{
        this.openSnackBar(this.Response, "Failed");
       
      }
        this.onNoClick();
        this.router.navigateByUrl('/counter', { skipLocationChange: true }).then(() => {
          this.router.navigate(['/fetch-data']);
        });
      
      }

    });
  }
  openSnackBar(message: string, action: string) {
    this._snackBar.open(message, action, {
      duration: 2000,
    });
  }

}
interface WeatherForecast {
  dateFormatted: string;
  temperatureC: number;
  temperatureF: number;
  summary: string;
}
